1.От нуля до единицы
Любую систему можно рассматривать с различных уровней абстракции. Абстракция подразумевает исключение израссмотрения тех элементов, которые в
данном конкретном случае несущественны для понимания работы этой системы. Физика, устройства, аналоговые схемы, цифровые схемы, логика, микроархитекутра,
архитектура, операционанные схемы и программое обеспечение. Это уровни абстракции, типичные для любой электронной компьютерной системы вместе со
строительными блоками, характерными для каждого уровня абстракции этой системы. На самом низком уровне абстракции находится физика, изучающая движение
электронов.
Конструкторская Дисциплина – это преднамеренное ограничение самим конструктором выбора возможных вариантов разработки, что позволяет работать
продуктивнее на более высоком уровне абстракции. Использование взаимозаменяемых частей – это, вероятно, самый хорошо знакомый всем нам пример
практического применения конструкторской дисциплины. Пример это кремневое ружье. Раньше его создавали индивидуально для каждого и при поломке
не имелось возможности быстрой починки. Но с приходом конструкторской дисциплины все изменилость. Теперь оружия стали с ограничением
ассортимента комплектующих деталей до стандартного набора с жестко установленными допусками для каждой детали. Что позволило собирать оружия гораздо
быстрее и при разработке использовать менее квалифоцированный персонал.
В дополнение к абстрагированию от несущественных деталей и конструкторской дисциплине разработчики электронных систем используют еще три базовых
принципа для управления сложностью системы: иерархичность, модульность конструкции и регулярность. Эти принципы применительно как к программному
обеспечению, так и к аппаратной части компьютерных систем.
 Иерархичность – принцип иерархичности предполагает разделение системы на отдельные модули, а затем последующее разделение каждого такого модуля
на фрагменты до уровня, позволяющего легко понять поведение каждого конкретного фрагмента.
 Модульность – принцип модульности требует, чтобы каждый модуль в системе имел четко определенную функциональность и набор интерфейсов и мог быть
легко и без непредвиденных побочных эффектов соединен с другими модулями системы.
 Регулярность – принцип регулярности требует соблюдения единообразия при проектировании отдельных модулей системы.Стандартные модули общего назначения,
например, такие как блоки питания, могут использоваться многократно, во много раз снижая количество модулей, необходимых для разработки новой системы.
Для иллюстрации трех базовых принципов вновь воспользуемся аналогией из оружейного производства.
Используя принцип иерархичности, мы можем разделить его на три главных модуля: ствол, ударно-спусковой механизм и приклад с цевьем. Принцип модульности
требует, чтобы каждый компонент выполнял четко определенную функцию и имел интерфейс. Функция приклада и цевья – служить базой для установки ствола и
ударно-спускового механизма. Интерфейс для приклада и цевья – это их длина и расположение крепёжных элементов, таких как винты или шурупы. Ствол ружья,
изготовленного с соблюдением принципа модульности конструкции, может быть установлен на приклады и цевья от разных производителей, если все соединяемые
части имеют правильную длину и подходящие крепёжные элементы. Функция ствола – разогнать пулю до необходимой скорости и придать ей вращение, чтобы
увеличить точность стрельбы (примечание переводчика: кремнёвые ружья не были нарезными и использовали круглые пули). Принцип модульности требует также,
чтобы при соединении модулей не возникало никаких побочных эффектов: конструкция приклада и цевья не должна препятствовать функционированию ствола.
Принцип регулярности учит тому, что взаимозаменяемые детали – это хорошая идея. При соблюдении принципа регулярности поврежденный ствол может быть с
легкостью заменен на идентичный. Стволы могут изготовляться на поточной линии с гораздо большей экономической эффективностью, чем в случае штучного
производства.
Одной из наиболее ранних цифровых систем стала Аналитическая Машина Чарльза Бэббиджа.
Предмет этой книги – цифровые схемы, использующие двоичные переменные нуль и единицу. Джордж Буль разработал систему логики, использующую двоичные
переменные, и эту систему сегодня называют его именем – Булева логика. Булевы переменные могут принимать значения ИСТИНА (TRUE) или ЛОЖЬ (FALSE).
Преимущества цифровой абстракции заключаются в том, что разработчик цифровой системы может сосредоточиться исключительно на единицах и нулях,
полностью игнорируя, каким образом булевы переменные представлены на физическом уровне.
Одиночный бит может принимать одно из двух значений, 0 или 1. Несколько битов, соединенных в одной строке, образуют двоичное (binary) число.
Каждая последующая позиция в двоичной строке имеет вдвое больший «вес», чем предыдущая позиция, так что двоичная система счисления – это система
по основанию 2. В двоичном числе «вес» каждой позиции увеличивается (так же, как и в десятичном – справа налево) следующим образом: 1, 2, 4, 8, 16, 32,
64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536 и т.д. Использование длинных двоичных чисел для записи и выполнения математических
расчетов на бумаге утомительно и чревато ошибками. Однако длинное двоичное число можно разбить на группы по четыре бита, каждая из которых представляет
одну из 24 = 16 цифровых комбинаций. Именно поэтому зачастую бывает удобнее использовать для работы систему счисления по основанию 16, называемую
шестнадцатеричной (hexadecimal). Для записи шестнадцатеричных чисел используются цифры от 0 до 9 и буквы от A до F.