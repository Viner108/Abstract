
                                           1. ОТ НУЛЯ ДО ЕДЕНИЦЫ

                                              1.1 Абстракция

Любую систему можно рассматривать с различных уровней абстракции. Абстракция подразумевает исключение израссмотрения тех элементов, которые в
данном конкретном случае несущественны для понимания работы этой системы. Физика, устройства, аналоговые схемы, цифровые схемы, логика, микроархитекутра,
архитектура, операционанные схемы и программое обеспечение. Это уровни абстракции, типичные для любой электронной компьютерной системы вместе со
строительными блоками, характерными для каждого уровня абстракции этой системы. На самом низком уровне абстракции находится физика, изучающая движение
электронов.
                                      1.2 Конструкторская Дисциплина

Конструкторская Дисциплина – это преднамеренное ограничение самим конструктором выбора возможных вариантов разработки, что позволяет работать
продуктивнее на более высоком уровне абстракции. Использование взаимозаменяемых частей – это, вероятно, самый хорошо знакомый всем нам пример
практического применения конструкторской дисциплины. Пример это кремневое ружье. Раньше его создавали индивидуально для каждого и при поломке
не имелось возможности быстрой починки. Но с приходом конструкторской дисциплины все изменилость. Теперь оружия стали с ограничением
ассортимента комплектующих деталей до стандартного набора с жестко установленными допусками для каждой детали. Что позволило собирать оружия гораздо
быстрее и при разработке использовать менее квалифоцированный персонал.
                                          Три базовых принципа
В дополнение к абстрагированию от несущественных деталей и конструкторской дисциплине разработчики электронных систем используют еще три базовых
принципа для управления сложностью системы: иерархичность, модульность конструкции и регулярность. Эти принципы применительно как к программному
обеспечению, так и к аппаратной части компьютерных систем.
 Иерархичность – принцип иерархичности предполагает разделение системы на отдельные модули, а затем последующее разделение каждого такого модуля
на фрагменты до уровня, позволяющего легко понять поведение каждого конкретного фрагмента.
 Модульность – принцип модульности требует, чтобы каждый модуль в системе имел четко определенную функциональность и набор интерфейсов и мог быть
легко и без непредвиденных побочных эффектов соединен с другими модулями системы.
 Регулярность – принцип регулярности требует соблюдения единообразия при проектировании отдельных модулей системы.Стандартные модули общего назначения,
например, такие как блоки питания, могут использоваться многократно, во много раз снижая количество модулей, необходимых для разработки новой системы.
Для иллюстрации трех базовых принципов вновь воспользуемся аналогией из оружейного производства.
Используя принцип иерархичности, мы можем разделить его на три главных модуля: ствол, ударно-спусковой механизм и приклад с цевьем. Принцип модульности
требует, чтобы каждый компонент выполнял четко определенную функцию и имел интерфейс. Функция приклада и цевья – служить базой для установки ствола и
ударно-спускового механизма. Интерфейс для приклада и цевья – это их длина и расположение крепёжных элементов, таких как винты или шурупы. Ствол ружья,
изготовленного с соблюдением принципа модульности конструкции, может быть установлен на приклады и цевья от разных производителей, если все соединяемые
части имеют правильную длину и подходящие крепёжные элементы. Функция ствола – разогнать пулю до необходимой скорости и придать ей вращение, чтобы
увеличить точность стрельбы (примечание переводчика: кремнёвые ружья не были нарезными и использовали круглые пули). Принцип модульности требует также,
чтобы при соединении модулей не возникало никаких побочных эффектов: конструкция приклада и цевья не должна препятствовать функционированию ствола.
Принцип регулярности учит тому, что взаимозаменяемые детали – это хорошая идея. При соблюдении принципа регулярности поврежденный ствол может быть с
легкостью заменен на идентичный. Стволы могут изготовляться на поточной линии с гораздо большей экономической эффективностью, чем в случае штучного
производства.

                                            1.3 Цифровая абстракция

Одной из наиболее ранних цифровых систем стала Аналитическая Машина Чарльза Бэббиджа.
Предмет этой книги – цифровые схемы, использующие двоичные переменные нуль и единицу. Джордж Буль разработал систему логики, использующую двоичные
переменные, и эту систему сегодня называют его именем – Булева логика. Булевы переменные могут принимать значения ИСТИНА (TRUE) или ЛОЖЬ (FALSE).
Преимущества цифровой абстракции заключаются в том, что разработчик цифровой системы может сосредоточиться исключительно на единицах и нулях,
полностью игнорируя, каким образом булевы переменные представлены на физическом уровне.

                                             1.4 Система счисления

Одиночный бит может принимать одно из двух значений, 0 или 1. Несколько битов, соединенных в одной строке, образуют двоичное (binary) число.
Каждая последующая позиция в двоичной строке имеет вдвое больший «вес», чем предыдущая позиция, так что двоичная система счисления – это система
по основанию 2. В двоичном числе «вес» каждой позиции увеличивается (так же, как и в десятичном – справа налево) следующим образом: 1, 2, 4, 8, 16, 32,
64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536 и т.д. Использование длинных двоичных чисел для записи и выполнения математических
расчетов на бумаге утомительно и чревато ошибками. Однако длинное двоичное число можно разбить на группы по четыре бита, каждая из которых представляет
одну из 24 = 16 цифровых комбинаций. Именно поэтому зачастую бывает удобнее использовать для работы систему счисления по основанию 16, называемую
шестнадцатеричной (hexadecimal). Для записи шестнадцатеричных чисел используются цифры от 0 до 9 и буквы от A до F.
Группа из восьми битов называется байт (byte). Байт представляет 2^8 = 256 цифровых комбинаций. Размер модулей, сохраненных в памяти компьютера,
обычно измеряется именно в байтах, а не битах. Группа из четырех битов (половина байта) называется полубайт (nibble). Полубайт представляет
2^4 = 16 цифровых комбинаций. Одна шестнадцатеричная цифра занимает один полубайт, а две шестнадцатеричные цифры – один байт. В настоящее
время полубайты уже не находят широкого применения, однако этот термин все же стоит знать.
Микропроцессор обрабатывает данные не целиком, а небольшими блоками, называемыми словами. Размер слова (word) не является величиной, установленной
раз и навсегда, а определяется архитектурой каждого конкретного микропроцессора. Абсолютное большинство компьютеров использует 64-битные процессоры.
Такие процессоры обрабатывают информацию блоками (словами) длиной 64 бита. А еще не так давно верхом совершенства считались компьютеры,
обрабатывающие информацию словами длиной 32 бита.
В рамках одной группы битов конечный бит, находящийся на одном конце этой группы (обычно правом), называется наименее значимым битом, или просто
младшим битом, а бит на другом конце группы называется наиболее значимым битом, или старшим битом. Аналогичным образом, внутри одного слова можно
выделить наименее значимый байт, или младший байт, и наиболее значимый байт, или старший байт.
В силу удачного совпадения 2^10 = 1024 ≈ 10^3. Этот факт позволяет нам использовать приставку кило (греческое название тысячи) для сокращенного
обозначения 2^10. Например, 2^10 байт – это один килобайт (1 КБ). Подобным же образом, мега (греческое название миллиона) обозначает 2^20 ≈ 10^6
, а Гига (греческое название миллиарда) указывает на 2^30 ≈ 10^9. Зная, что 2^10 ≈ 1 тысяча, 2^20 ≈ 1 миллион, 2^30 ≈ 1 миллиард. Сложение двоичных
чисел производится так же, как и сложение десятичных, с той лишь разницей, что двоичное сложение выполнить гораздо проще. Как и при сложении
десятичных чисел, если сумма двух чисел превышает значение, помещающееся в один разряд, мы переносим 1 в следующий разряд.
Цифровые системы обычно оперируют числами с заранее определенным и фиксированным количеством разрядов. Ситуацию, когда результат сложения превышает
выделенное для него количество разрядов, называют переполнением (overflow). Четырехбитная ячейка памяти, например, может сохранять значения
в диапазоне [0, 15]. Такая ячейка переполняется, если результат сложения превышает число 15. В этом случае дополнительный пятый бит отбрасывается,
а результат, оставшийся в четырех битах, будет ошибочным.
До сих пор мы рассматривали двоичные числа без знака (unsigned) – то есть только положительные числа. Часто, однако, для вычислений требуются как
положительные, так и отрицательные числа, а это значит, что для знака двоичного числа нам потребуется дополнительный разряд. Существует несколько
способов представления двоичных чисел со знаком (signed). Наиболее широко применяются два: Прямой Код (Sign/Magnitude) и Дополнительный Код
(Two’s Complement).
Прямой код
Представление отрицательных двоичных с использованием прямого кода интуитивно покажется вам наиболее привлекательным, поскольку совпадает с привычным
способом записи отрицательных чисел, когда сначала идет знак минус, а затем абсолютное значение числа. Двоичное число, состоящее из N битов и
записанное в прямом коде, использует наиболее значимый бит для знака, а остальные N−1 бита для записи абсолютного значения этого числа. Если наиболее
значимый бит 0, то число положительное. Если наиболее значимый бит 1, то число отрицательное. К сожалению, стандартный способ сложения не работает
в случае двоичных чисел со знаком, записанных в прямом коде.
Дополнительный код
Двоичные числа, записанные с использованием дополнительного кода, и двоичные числа без знака идентичны, за исключением того, что в случае
дополнительного кода вес наиболее значимого бита −2^(N−1) вместо 2^(N−1), как в случае двоичного числа без знака. В случае дополнительного кода
нулевое значение представлено нулями во всех разрядах двоичного числа: 00…000.Обратите внимание на то, что наиболее значимый разряд у всех положительных
чисел – это «0», в то время как у отрицательных чисел – это «1», то есть наиболее значимый бит дополнительного кода можно рассматривать как аналог
знакового бита прямого кода. Однако на этом сходство кончается, поскольку остальные биты дополнительного кода интерпретируются не так, как биты прямого
кода.
Пример: начните с +2 = 0010. Для получения −2 инвертируйте биты и добавьте единицу. Инвертируя 0010, получим 1101. 1101 + 1 = 1110. Итак, −2 равно 1110.
Неоспоримым преимуществом дополнительного кода является то, что привычный способ сложения работает как в случае положительных, так и отрицательных чисел.
Вычитание одного двоичного числа из другого осуществляется путем преобразования вычитаемого в дополнительный код и последующего его сложения с уменьшаемым.
Сравнение способов представления двоичных чисел
Три наиболее часто использующиеся на практике способа представления двоичных чисел – это двоичные числа без знака, прямой код и дополнительный код.
Преимущества дополнительного кода заключаются в том, что его можно использовать для представления как положительных, так и отрицательных целых
чисел, а привычный способ сложения работает для всех чисел, представленных в дополнительном коде. Вычитание осуществляется путем преобразования
вычитаемого в отрицательное число (т.е. путем дополнения этого числа до двух) и последующего сложения с уменьшаемым.

                                           1.5 Логические элементы

Логические элементы
Логические вентили (logic gates) – это простейшие цифровые схемы, получающие один или более двоичных сигналов на входе и производящие новый двоичный
сигнал на выходе. При графическом изображении логических вентилей для обозначения одного или нескольких входных сигналов и выходного сигнала
используются специальные символы. Если смотреть на изображение логического элемента, то входные сигналы обычно размещаются слева (или сверху), а
выходные сигналы – справа (или снизу). Разработчики цифровых систем обычно используют первые буквы латинского алфавита для обозначения входных
сигналов и латинскую букву Y для обозначения выходного сигнала. Взаимосвязь между входными сигналами и выходным сигналом логического вентиля может
быть описана с помощью таблицы истинности (truth table) или уравнением Булевой логики.
Логический вентиль НЕ
Логический вентиль НЕ (NOT gate) имеет один вход A и один выход Y, причем выходной сигнал Y – это сигнал, обратный входному сигналу A, или, как еще
говорят, инвертированный A.
Буфер
Буфер просто копирует входной сигнал на выход. Если рассматривать буфер как часть логической схемы, то такой элемент ничем не отличается от простого
провода и может показаться бесполезным. Вместе с тем, на аналоговом уровне буфер может обеспечить характеристики, необходимые для нормального
функционирования разрабатываемого устройства.  Буфер, например, необходим для передачи большого тока электродвигателю или для быстрой передачи сигнала
сразу нескольким логическим элементам. Это еще один пример, доказывающий необходимость рассмотрения любой системы с нескольких уровней абстракции,
если мы хотим в полной мере понять эту систему. Рассмотрение буфера только с позиции цифрового уровня абстракции не позволяет нам разглядеть его
реальную функцию.
Логический вентиль И
Логические вентили с двумя входными сигналами гораздо интереснее, чем вентиль НЕ и буфер. Логический вентиль И (AND gate) выдает значение ИСТИНА на выход Y
исключительно только если оба входных сигнала A и B имеют значение ИСТИНА. В противном случае выходной сигнал Y имеет значение ЛОЖЬ.
Логический вентиль ИЛИ
Логический вентиль ИЛИ (OR gate) выдаёт значение ИСТИНА на выход Y, если хотя бы один из двух входных сигналов A или B имеет значение ИСТИНА.
Другие логические элементы с двумя входными сигналами
Добавление кружка на выходе любого логического вентиля превращает этот вентиль в ему противоположный – то есть инвертирует его. Исключающее ИЛИ с
количеством входов равным N (N-input XOR gate) иногда еще называют элементом контроля по чётности (parity gate). Такой вентиль выдает на выход сигнал
ИСТИНА, если нечетное количество входных сигналов имеет значение ИСТИНА.Вентиль исключающее ИЛИ-НЕ с двумя входами иногда называют вентилем равенства,
так как его выход есть ИСТИНА, когда входы совпадают.
Логические элементы с количеством входов больше двух
Многие Булевы функции, а значит, и логические вентили, необходимые для их реализации, оперируют тремя и более входными сигналами. Наиболее распространенные
из таких вентилей – это И, ИЛИ, Исключающее ИЛИ, И-НЕ, ИЛИ-НЕ и Исключающее ИЛИ-НЕ. Логический вентиль И с количеством входов равным N выдает значение
ИСТИНА, когда значения на всех N входах этого логического вентиля ИСТИНА. Логический вентиль ИЛИ с количеством входов равным N выдает ИСТИНА, когда
значение хотя бы одного из его входов ИСТИНА.

                                          1.6 За пределами цифровой абстракции

Цифровая система оперирует дискретными переменными. Однако для представления этих переменных используются непрерывные физические величины, такие как напряжение
в электрической цепи, положение шестеренок в механической передаче или уровень жидкости в гидравлическом цилиндре. VOH и VOL называются соответственно
высоким и низким логическими уровнями выхода, а VIH и VIL называются соответственно высоким и низким логическими уровнями входа.
Первый логический элемент в рассматриваемой схеме называется источник, а второй – приемник. Если приемник получает на вход сигнал в диапазоне от 0 до VIL,
он рассматривает такой сигнал как нуль. Если приемник получает на вход сигнал в диапазоне от VIH до VDD, он рассматривает такой сигнал как единицу.
Если сигнал попадает запретную зону (forbidden zone) между VIL и VIH поведение этого логического  элемента становится непредсказуемым.
Для того чтобы выходной сигнал источника был правильно интерпретирован на входе приемника, необходимо, чтобы VO < VIL и VOH > VIH.
Допускаемый уровень шумов (noise margin) – это то максимальное количество шума, присутствие которого в выходном сигнале источника не мешает приемнику корректно
интерпретировать значение полученного сигнала.
NML = VIL – VOL нижний допускаемый уровень шумов.
NMH = VO – VIH  верхний допускаемый уровень шумов.
Для того, чтобы избежать попадания входных сигналов в запретные зоны, логические вентили должны разрабатываться в соответствии с принципом статической дисциплины.
Принцип статической дисциплины требует, чтобы при условии наличия логически корректных сигналов на входе каждый элемент системы выдавал логически корректные сигналы на выходе.
Выбор VDD и логических уровней может быть произвольным, однако этот выбор должен обеспечить совместимость всех логических вентилей, обменивающихся данными
в пределах одной цифровой системы. Поэтому вентили обычно группируются в семейства логики таким образом, что любой элемент из одного семейства при соединении
с любым другим элементом из этого же семейства автоматически обеспечивает соблюдение принципа статической дисциплины.

1.7 КМОП ТРАНЗИСТОРЫ

Транзистор – это переключатель с двумя положениями «включить» и «выключить», контролируемый путем подачи напряжения или тока на управляющую клемму. Существуют два основных типа
транзисторов – биполярные транзисторы и МОП-транзисторы – металл-оксид-полупроводник- транзисторы.
В настоящее время полевые МОП-транзисторы – это те «кирпичики», из которых собираются почти все цифровые системы. МОП-транзисторы изготовляются из кремния – элемента,
преобладающего в скальной породе и песке. По своей природе, кремний – плохой проводник, потому что все электроны заняты в ковалентных связях. Однако проводимость кремния улучшается,
если добавить в него небольшое количество атомов другого вещества, называемого примесью.
Мышьяк принято называть примесью n-типа. Бор называют примесью p-типа. А поскольку проводимость кремния может меняться на порядки в зависимости от концентрации примеси,
кремний называют полупроводником.
Диод – это соединение полупроводника p-типа с полупроводником n-типа. При этом область p-типа называют анодом, а область n-типа называют катодом. Когда напряжение
на аноде превышает напряжение на катоде, диод открыт, и ток через него течет от анода к катоду. Если же напряжение на аноде ниже напряжения на катоде, то диод закрыт , и
ток через диод не течет.
Конденсатор состоит из двух проводников, отделенных друг от друга изолятором. Если к одному из проводников приложить напряжение V, то через некоторое время этот проводник
накопит электрический заряд Q, а другой проводник накопит противоположный электрический заряд −Q. Емкостью C конденсатора называется отношение заряда к приложенному
напряжению C = Q/V. Емкость – это очень важный параметр электрической схемы, поскольку зарядка или разрядка любого проводника требует времени и энергии. Более высокая
емкость означает, что электрическая схема будет работать медленнее и потребует для своего функционирования больше энергии.
Сэндвич полевого МОП-транзистора состоит из слоя проводника, называемого затвором, наложенного на слой изолятора – диоксида кремния, в свою очередь, наложенного на кремневую
пластину, называемую подложкой. Существуют два вида полевых МОП-транзисторов: n-МОП и p-МОП. В транзисторах n-типа, называемых n-МОП, области, где расположены
полупроводниковые примеси n-типа – в свою очередь называемые истоком и стоком – находятся рядом с затвором (gate), причем вся эта структура размещается на подложке p-типа.
В транзисторах же p-МОП и исток, и сток – это области p-типа, размещенные на подложке n-типа.

                                                     6. АРХИТЕКТУРА

                                                    6.1 Предисловие
Архитектура – это то, как видит компьютер программист. Она определена набором команд (языком) и местом нахождения операндов (регистры и память). Слова в языке компьютера называются
«инструкциями» или «командами», а словарный запас компьютера – «системой команд».
Операнды – это входные данные, с которыми производится операция, и получаемые результаты. Операнды могут находиться в памяти, в регистрах или внутри самой инструкции. Аппаратное
обеспечение компьютера «понимает» только нули и единицы, поэтому инструкции закодированы двоичными числами в формате, который называется машинным языком.
Микропроцессоры – это цифровые системы, которые читают и выполняют команды машинного языка. Архитектура компьютера не определяет структуру аппаратного обеспечения, которое её реализует.
Взаимное расположение регистров, памяти, АЛУ и других строительных блоков, из которых состоит микропроцессор, называют микроархитектурой.

                                                    6.2 Язык ассемблера

Язык ассемблера – это удобное для восприятия человеком представление родного языка компьютера. Наиболее частая операция, выполняемая компьютером, – это сложение.
Чтобы команды могли быстро выполняться, они должны быстро получать доступ к операндам. Но чтение операндов из памяти занимает много времени, поэтому большинство архитектур предоставляют
небольшое количество регистров для хранения наиболее часто используемых операндов.
Первое правило хорошей разработки: для простоты придерживайтесь единообразия.
Второе правило хорошей разработки: Типичный сценарий должен быть быстрым.
Третье правило хорошей разработки: Чем меньше, тем быстрее.
Четвертое правило хорошей разработки: она требует хороших компромиссов.