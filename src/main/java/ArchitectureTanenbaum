1.Введение
Цифровой компьютер — это машина, которая может решать задачи, исполняя данные ей команды. Последовательность команд, описывающих решение определенной
задачи, называется программой. Электронные схемы каждого компьютера могут распознавать и исполнять ограниченный набор простых команд. Все программы
перед исполнением должны быть превращены в последовательность таких команд, которые обычно не сложнее, чем, например:
- сложить два числа;
- проверить, не является ли число нулем;
- скопировать блок данных из одной части памяти компьютера в другую.
Эти примитивные команды в совокупности составляют язык, на котором люди могут общаться с компьютером. Такой язык называется машинным. Разработчик
при создании нового компьютера должен решить, какие команды следует включить в машинный язык этого компьютера. Это зависит от назначения компьютера
и от задач, которые он должен решать. Обычно стараются сделать машинные команды как можно проще, чтобы избежать сложностей при разработке компьютера
и снизить затраты на необходимую электронику. Большинство машинных языков крайне примитивны, из-за чего писать на них и трудно, и утомительно.
Это простое наблюдение с течением времени привело к построению ряда уровней абстракций, каждая из которых надстраивается над абстракцией более низкого
уровня.
Как мы уже сказали, существует огромная разница между тем, что удобно людям, и тем, что могут компьютеры. Люди хотят сделать X, но компьютеры могут
сделать только Y. Из-за этого возникает проблема. Цель данной книги — объяснить, как решить эту проблему.
Первый способ исполнения программы, написанной на языке понятному человеку, подразумевает замену каждой команды эквивалентным набором команд на языке
понятному компьютеру. В этом случае компьютер исполняет новую программу, написанную на языке понятному компьютеру,
вместо старой программы, написанной на языке понятному человеку. Эта технология называется трансляцией.
Второй способ заключается в создании на языке понятному компьютеру программы, получающей в качестве входных данных программы, написанные на языке
понятному человеку. При этом каждая команда языка понятному человеку обрабатывается поочередно, после чего сразу исполняется эквивалентный ей набор
команд языка понятному компьютеру. Эта технология не требует составления новой программы на языке понятному компьютеру. Она называется интерпретацией,
а программа, которая осуществляет интерпретацию, называется интерпретатором.
Впрочем, чем мыслить категориями трансляции и интерпретации, гораздо проще представить себе существование гипотетического компьютера или виртуальной
машины, для которой машинным языком является язык понятный человеку.
Большинство современных компьютеров состоит из двух и более уровней.
Существуют машины даже с шестью уровнями:
-Уровень 5 Уровень языка прикладных программистов
-Уровень 4 Уровень ассемблера
-Уровень 3 Уровень оперативной системы
-Уровень 2 Уровень архитектуры набора команд
-Уровень 1 Уровень микроархитектуры
-Уровень 0 Цифровой логический уровень
У первых цифровых компьютеров 40-х годов было только два уровня: уровень архитектуры набора команд, на котором осуществлялось программирование,
и цифровой логический уровень, на котором программы исполнялись. Схемы цифрового логического уровня были ненадежны, сложны для производства и понимания.
В 50-е годы было построено несколько трехуровневых машин. В 60-х годах число таких машин значительно увеличилось. К 70-м годам идея о том, что написанная
программа сначала должна интерпретироваться микропрограммой, а не исполняться непосредственно электроникой, стала преобладающей. В наши дни она
используется всеми современными компьютерами.
В ходе эволюции компьютерных технологий были разработаны сотни разных компьютеров. Многие из них давно забыты, в то время как влияние других на
современные идеи оказалось весьма значительным.
Первым человеком, создавшим счетную машину, был французский ученый Блез Паскаль (1623–1662), в честь которого назван один из языков программирования.
Паскаль сконструировал эту машину в 1642 году, когда ему было всего 19 лет, для своего отца, сборщика налогов. Это была механическая конструкция
с шестеренками и ручным приводом. Счетная машина Паскаля могла исполнять только операции сложения и вычитания.
Стимулом к созданию электронного компьютера стала Вторая мировая война. В начале войны германские подводные лодки наносили серьезный ущерб британскому
флоту. Германские адмиралы посылали на подводные лодки по радио команды, и хотя англичане могли перехватывать эти команды, проблема была
в том, что радиограммы были закодированы с помощью прибора под названием ENIGMA, предшественник которого был спроектирован изобретателем-дилетантом
и бывшим президентом США Томасом Джефферсоном.
В начале войны англичанам удалось приобрести ENIGMA у поляков, которые, в свою очередь, украли ее у немцев. Однако чтобы расшифровать закодированное
послание, требовалось огромное количество вычислений, и их нужно было произвести сразу после перехвата радиограммы. Поэтому британское правительство
основало секретную лабораторию для создания электронного компьютера под названием COLOSSUS. Правительство расматривало его как военную тайну
на протяжении 30 лет, COLOSSUS не стал базой для дальнейшего развития компьютеров.
По темпам развития компьютерная промышленность опережает все остальные отрасли. Главная движущая сила — способность производителей помещать с каждым
годом все больше и больше транзисторов на микросхему. Чем больше транзисторов (крошечных электронных переключателей), тем больше объем памяти и мощнее
процессоры. Гордон Мур (Gordon Moore), один из основателей и бывший председатель совета директоров Intel, однажды сострил по поводу того,
что если бы авиационные технологии развивались с такой же скоростью, как компьютерные, самолеты стоили бы 500 долларов и облетали землю за 20 минут
на 20 литрах топлива. Правда, для этого они должны стать размером с обувную коробку.
Он же сформулировал закон технологического прогресса, известный теперь
под именем закона Мура. Закон Мура часто представляется в формулировке, которая гласит, что число транзисторов на одной микросхеме удваивается каждые
18 месяцев, то есть увеличивается на 60 % каждый год. По большому счету, закон Мура — это никакой не закон, а простое эмпирическое наблюдение о том,
с какой скоростью физики и инженеры-технологи развивают компьютерные технологии, и предсказание, что с такой скоростью они будут работать и в будущем.
Типы современных компьютеров:
-"Одноразовые" компьютеры
В самой верхней строчке находятся микросхемы, которые приклеиваются на внутреннюю сторону поздравительных открыток для проигрывания мелодий
типа «Happy Birthday», свадебного марша или чего-нибудь в этом роде. Вероятно, наиболее значимым достижением в этой области стало появление микросхем
RFID. При получении импульса с внешней антенны они получают питание на время, достаточное для отправки ответного импульса со своим номером.
Несмотря на крошечные размеры, спектр практического применения таких микросхем весьма значителен.
Взять хотя бы снятие штрих-кодов с товаров в магазинах. Уже проводились испытания, в ходе которых производители снабжали все выпускаемые ими товары
микросхемами RFID (вместо штрих-кодов). При наличии таких микросхем покупатель может выбрать нужные продукты, положить их в корзину и, минуя кассу,
выйти из магазина. По выходе считывающее устройство с антенной отсылает сигнал, заставляющий микросхемы на всех приобретенных товарах «рассказать»
о себе, что они и делают путем беспроводной отсылки короткого импульса. Покупатель, в свою очередь, идентифицируется по микросхеме на его
банковской/кредитной карточке. В конце каждого месяца магазин выставляет покупателю детализированный счет за все приобретенные за этот период товары.
Если действующая банковская/кредитная карта на микросхеме RFID у покупателя не обнаруживается, звучит аварийный сигнал. Такая система позволяет не
только избавиться от кассиров и очередей, но и защищает от краж — ведь прятать товары в карманах и сумках становится бессмысленно!
-Встраемые компьютеры(микроконтроллеры)
Вторую строку в таблице занимают компьютеры, которыми оснащаются разного рода бытовые устройства. Такого рода встроенные компьютеры, называемые также
микроконтроллерами, выполняют функцию управления устройствами и организации их пользовательских интерфейсов. Диапазон устройств, работающих
с помощью микрокомпьютеров, крайне широк (примеры даются в скобках):
* бытовые приборы (будильники, стиральные машины, сушильные аппараты, микроволновые печи, охранные сигнализации);
* коммуникаторы (беспроводные и сотовые телефоны, факсимильные аппараты, пейджеры);
* периферийные устройства (принтеры, сканеры, модемы, приводы CD-ROM);
* развлекательные устройства (видеомагнитофоны, DVD-плееры, музыкальные центры, MP3-плееры, телеприставки);
* формирователи изображений (телевизоры, цифровые фотокамеры, видео-камеры, объективы, фотокопировальные устройства);
* медицинское оборудование (рентгеноскопические аппараты, томографы, кардиомониторы, цифровые термометры);
* военные комплексы вооружений (крылатые ракеты, межконтинентальные баллистические ракеты, торпеды);
* торговое оборудование (торговые автоматы, кассовые аппараты);
* игрушки (говорящие куклы, приставки для видеоигр, радиоуправляемые машинки и лодки).
В любой современной машине представительского класса устанавливается по полсотни микроконтроллеров, которые управляют различными подсистемами,
в частности автоблокировкой колес, впрыском топлива, магнитолой, освещением и системой навигации. В реактивных самолетах количество микроконтроллеров
достигает 200 и даже больше! В любом домашнем хозяйстве имеется по несколько сот компьютеров, причем члены семьи зачастую даже не подозревают об их
существовании. Через несколько лет практически все приборы, работающие на источниках электропитания, будут оснащаться микроконтроллерами. По объемам
ежегодных продаж микроконтроллеры опережают компьютеры всех остальных типов (за исключением одноразовых) на несколько порядков.
Каждый микроконтроллер состоит из процессора, памяти и средств ввода-вывода. Ввод-вывод, как правило, осуществляется отслеживанием состояния
кнопок и переключателей с контролем состояния световых индикаторов, дисплея и звуковых компонентов устройства.
-Мобильные и игровые компьютеры
К следующей категории относятся мобильные и игровые компьютеры. В сущности, это обычные компьютеры, в которых расширенные возможности графических
и звуковых контроллеров сочетаются с ограничениями по объему ПО и пониженной расширяемостью. Три популярных моделей этой категории:Sony PlayStation 3,
Microsoft Xbox 360,планшет Samsung Galaxy.
Основное различие между этими машинами и ПК, впрочем, состоит не в производительности процессора, а в том, что игровые компьютеры представляют собой
закрытые, законченные системы. Расширяемость таких систем при помощи сменных плат не предусмотрена, хотя в некоторых моделях присутствуют интерфейсы
USB и FireWire. Что еще важнее, игровые компьютеры оптимизированы для конкретной области применения — трехмерных игр с высоким уровнем интерактивности
и мультимедийным выводом. Все остальные функции считаются вторичными. Ограничения по части аппаратного и программного обеспечения, низкие тактовые
частоты, недостаточный объем памяти, отсутствие монитора с высоким разрешением и (как правило) жесткого диска — все это позволяет продавать игровые
системы по более низким ценам, чем персональные компьютеры. И действительно, несмотря на упомянутые ограничения, игровые компьютерып родаются
миллионами, а их популярность только растет.
-Персональные компьютеры
В следующую категорию входят персональные компьютеры. Именно они ассоциируются у большинства людей со словом «компьютер». Персональные компьютеры
делятся на две основных категории: настольные и портативные (ноутбуки). Как правило, те и другие комплектуются модулями памяти общей емкостью
в несколько гигабайт, жестким диском с данными на несколько терабайтов, приводом CD-ROM/DVD/Blu-ray, звуковой картой, сетевым интерфейсом, монитором
с высоким разрешением и другими периферийными устройствами. На них устанавливаются сложные операционные системы, они расширяемы, при работе с ними
используется широкий спектр программного обеспечения. Центральным компонентом любого персонального компьютера является печатная плата, на которой
устанавливаются процессор, память и устройства ввода-вывода (звуковая плата, возможно — модем и т. д.), а также интерфейсы клавиатуры, мыши,
дискового привода, сетевой платы и прочих периферийных устройств, а также расширительные гнезда.
Еще одна вариация на эту тему — планшетные компьютеры (как, например, популярные iPad).
-Серверы
Мощные персональные компьютеры и рабочие станции часто используются в качестве сетевых серверов — как в локальных сетях (обычно в пределах одной
организации), так и в Интернете. Серверы, как правило, поставляются в однопроцессорной и мультипроцессорной конфигурациях. В системах из этой
категории обычно устанавливаются модули памяти общим объемом в несколько гигабайтов, жесткие диски емкостью в терабайты и высокоскоростные сетевые
интерфейсы. Некоторые серверы способны обрабатывать тысячи транзакций в секунду. С точки зрения архитектуры, однопроцессорный сервер не слишком
отличается от персонального компьютера. Он просто работает быстрее, занимает больше места, содержит больше дискового пространства и устанавливает
более скоростные сетевые соединения. Серверы работают под управлением тех же операционных систем, что и персональные компьютеры, как правило,
это различные версии UNIX и Windows.
В связи с тем, что по соотношению «цена/производительность» позиции рабочих станций и персональных компьютеров постоянно улучшаются, в последние годы
появилась практика их объединения в кластеры. Кластер состоит из нескольких стандартных серверных систем, подключенных друг к другу по
высокоскоростной сети и снабженных специальным программным обеспечением, которое позволяет направлять их ресурсы на решение единых задач (как правило,
научных и инженерных). Большие кластеры обычно размещаются в специальных залах или зданиях, называемых центрами обработки данных.
С появлением центров обработки данных мы отчасти возвращаемся к прошлому в форме облачных технологий — своего рода «мэйнфреймам версии 2.0».
Идея заключается в том, что у каждого пользователя имеется несколько простых устройств: PC, ноутбуков, планшетов и смартфонов, которые, по сути,
предоставляют пользовательский интерфейс к облаку (то есть центрам обработки данных), в котором хранятся все фотографии, видеоролики, музыка и другие данные поль-
зователя.
-Мейнфреймы
Наконец мы дошли до больших компьютеров размером с комнату, напоминающих компьютеры 60-х годов и традиционно называемых мэйнфреймами. В большинстве
случаев эти системы — прямые потомки больших компьютеров серии 360. Обычно они работают не намного быстрее, чем мощные серверы, но у них выше
скорость процессов ввода-вывода и они часто оснащаются огромными дисковыми массивами, в которых хранятся многие тысячи гигабайт информации.
Кроме выполнения программ, накопленных за последние 40 лет, в последние годы мэйнфреймы начали возрождаться под влиянием Интернета. Они заняли
нишу мощных серверов Интернета, способных обрабатывать огромное количество транзакций в секунду, что крайне актуально для электронной коммерции в целом,
и компаний, вынужденных обслуживать громадные базы данных в частности.
Основное внимание в этой книге уделяется трем популярным архитектурам
наборов команд (ISA): x86, ARM и AVR.
Введение в архитектуру x86
В конце 60-х годов калькуляторы представляли собой большие электромеханические машины размером с современный лазерный принтер и весили около 20 кг.
В сентябре 1969 года японская компания Busicom обратилась к корпорации Intel с просьбой выпустить 12 несерийных микросхем для электронной вычислительной
машины. Инженер компании Intel Тед Хофф (Ted Hoff ), назначенный в качестве исполнителя этого проекта, решил, что можно поместить 4-разрядный
универсальный процессор на одну микросхему, которая будет выполнять те же функции и при этом окажется проще и дешевле. Так в 1970 году появился
первый процессор на одной микросхеме — 4004 на 2300 транзисторах [Faggin et al., 1996].
В 1989 появился процессор 80486. Он работал быстрее, чем 80386, мог исполнять операции с плавающей точкой и имел кэш-память объемом 8 Кбайт.
Кэш-память позволяет держать наиболее часто используемые слова внутри центрального процессора и избегать (медленных) обращений к основной памяти.
Процессор 80486 содержал встроенную поддержку мультипроцессорного режима, что давало производителям возможность конструировать системы с несколькими
процессорами. В этот момент компания Intel, проиграв судебную тяжбу по поводу нарушения правил именования товаров, узнала, что числа (например, 80486) не могут
использоваться в качестве товарных знаков, поэтому следующее поколение компьютеров получило название Pentium (от греческого слова πεντε — пять).
Впоследствии в линейку Pentium были введены дополнительные команды, известные под общим названием MMX (MultiMedia eXtension — мультимедийное
расширение). Они были предназначены для ускорения вычислительных операций, связанных с обработкой звуковых и видеоданных, что позволило отказаться
от специальных мультимедийных сопроцессоров.
Интересно, что хотя закон Мура раньше ассоциировался с числом битов в памяти компьютера, он в равной степени применим и к процессорам. Если напротив
даты выпуска каждой микросхемы поставить количество транзисторов на этой микросхеме по полулогарифмической шкале (см. табл. 1.4), мы увидим,
что закон Мура действует и здесь. Вероятно, закон Мура будет действовать еще несколько лет, однако уже сейчас начинает проявляться проблема,
способная нарушить тенденцию — теплоотдача. В настоящее время тактовая частота повышается за счет уменьшения размера транзисторов, что,
в свою очередь, вызывает потребность в более высоком напряжении.
Введение в архитектуру ARM
В начале 1980-х годов английская компания Acorn Computer на волне успеха своего 8-разрядного персонального компьютера BBC Micro приступила к работе
над второй машиной, надеясь составить конкуренцию недавно выпущенному IBM PC. Первая архитектура ARM (названная ARM2) появилась в персональном
компьютере Acorn Archimedes. Это была очень быстрая и недорогая для своего времени машина, которая выполняла до 2 MIPS (миллионов команд в секунду)и
стоила на момент выпуска всего 899 фунтов. Машина стала весьма популярной в Великобритании, Ирландии, Австралии и Новой Зеландии, особенно в школах.
Видя успех Archimedes, фирма Apple обратилась к Acorn с предложением разработать процессор ARM для своего нового проекта Apple Newton.
В отличие от исходной архитектуры ARM, новый процессор включал 4-килобайтный кэш, существенно повышавший производительность. Хотя Apple Newton
не пользовался большим успехом, процессор ARM 610 нашел другие успешные применения; в частности, он использовался в компьютере Acorn RISC PC.
Вероятно, самой известной из архитектур ARM стал процессор ARM7, который был выпущен ARM в 1994 году и продолжает широко использоваться
в наши дни. Он содержит раздельные кэши команд и данных, а также реализует 16-разрядный набор команд Thumb — сокращенную версию полного 32-разрядного
набора команд ARM, которая позволяет программировать многие стандартные операции в меньших 16-разрядных командах, существенно сокращая объем
необходимой памяти. Процессор хорошо подходил для широкого диапазона низко- и среднепроизводительных встроенных систем, среди которых были тостеры,
системы управления двигателем и даже портативное игровое устройство Nintendo Gameboy Advance.
В отличие от многих компьютерных компаний, ARM не производит микропроцессоры. Вместо этого фирма создает архитектуры, средства разработчика
и библиотеки и продает лицензии на них разработчикам систем и производителям микросхем.
Архитектура ARM пользовалась огромным успехом в секторах пониженного энергопотребления, мобильных и встроенных систем. В январе 2011 года фирма
ARM объявила о том, что продажи процессоров ARM с момента выпуска достигли 15 миллиардов и что продажи продолжают расти. Несмотря на то что архитектура
ARM адаптирована для рынков низкопроизводительных устройств, она обладает вычислительным потенциалом для любого рынка, и некоторые признаки
указывают на возможное расширение горизонта.
Единицы измерения
Следует иметь в виду, что при измерении емкости памяти, дисковых накопителей, файлов и баз данных в компьютерной отрасли вышеуказанные единицы
измерения приобретают несколько другой смысл. Например, приставка кило означает не 10^3
(1000), а 2^10 (1024). Иными словами, объем памяти всегда выражается степенью числа «2». Таким образом, в 1 Кбайт содержится 2^10 (1 024) байт,
в 1 Мбайт — 2^20 (1 048 576) байт, в 1 Гбайт — 2^30 (1 073 741 824) байт, в 1 Тбайт — 2^40 (1 099 511 627 776) байт.
С другой стороны, по каналу с пропускной способностью 1 Кбит/с за секунду передается 1000 бит, а в локальной сети на 10 Мбит/с — 10 000 000 бит. Это
связано с тем, что пропускная способность не ограничена значениями, являющимися степенями двойки. К сожалению, многие люди путают эти две системы,
особенно при оценке емкости дисковых накопителей.
Чтобы избежать двусмысленности, органы стандартизации ввели новые термины: кибибайт для 2^10 байт, мебибайт для 2^20 байт, гибибайт для 2^30 и тебибайт
для 2^40 байт соответственно. Тем не менее особой популярности они пока не получили. Как нам кажется, до тех пор пока термины не станут общепринятыми,
лучше использовать обозначения Кбайт, Мбайт, Гбайт и Тбайт для 2^10, 2^20, 2^30и 2^40 байт соответственно, а обозначения Кбит/с, Мбит/с, Гбит/с и Тбит/с
— для 10^3, 10^6, 10^9 и 10^12 бит/с.
2.Огранизация компьютерных систем
Процессоры
Центральный процессор — это мозг компьютера. Его задача — выполнять программы, находящиеся в основной памяти. Для этого он вызывает команды из
памяти, определяет их тип, а затем выполняет одну за другой. Компоненты соединены шиной, представляющей собой набор параллельно связанных проводов
для передачи адресов, данных и управляющих сигналов. Шины могут быть внешними (связывающими процессор с памятью и устройствами ввода-вывода)
и внутренними. Современный компьютер использует несколько шин.
Процессор состоит из нескольких частей. Блок управления отвечает за вызов команд из памяти и определение их типа. Арифметико-логическое устройство
выполняет арифметические операции (например, сложение) и логические операции (например, логическое И).
Внутри центрального процессора находится быстрая память небольшого объема для хранения промежуточных результатов и некоторых команд управления.
Эта память состоит из нескольких регистров, каждый из которых выполняет определенную функцию. Обычно размер всех регистров одинаков. Каждый регистр
содержит одно число в диапазоне, верхняя граница которого зависит от размера регистра. Операции чтения и записи с регистрами выполняются очень быстро,
поскольку они находятся внутри центрального процессора. Самый важный регистр — счетчик команд, который указывает, какую команду нужно выполнять
следующей. Еще есть регистр команд, в котором находится выполняемая в данный момент команда.
Устройство центрального процессора
Тракт данных состоит из регистров (обычно от 1 до 32), арифметико-логического устройства (АЛУ) и нескольких соединительных шин. Содержимое регистров
поступает во входные регистры АЛУ. В них находятся входные данные АЛУ, пока АЛУ производит вычисления. Тракт данных — важная составная часть всех
компьютеров.
АЛУ выполняет сложение, вычитание и другие простые операции над входными данными и помещает результат в выходной регистр. Содержимое этого выходного
регистра может записываться обратно в один из регистров или сохраняться в памяти, если это необходимо.
Большинство команд можно разделить на две группы: команды типа регистрпамять и типа регистр-регистр. Команды первого типа вызывают слова из памяти,
помещают их в регистры, где они используются в качестве входных данных АЛУ(слова — это такие элементы данных, которые перемещаются между памятью и
регистрами). Словом может быть целое число.
Команды второго типа вызывают два операнда из регистров, помещают их во входные регистры АЛУ, выполняют над ними какую-нибудь арифметическую или
логическую операцию и переносят результат обратно в один из регистров. Этот процесс называется циклом тракта данных. В какой-то степени он определяет,
что может делать машина. Современные компьютеры оснащаются несколькими АЛУ, работающими параллельно и специализирующимися на разных функциях.
Чем быстрее происходит цикл тракта данных, тем быстрее компьютер работает.
Выполнение команд
Центральный процессор выполняет каждую команду за несколько шагов. Он делает следующее:
-1. Вызывает следующую команду из памяти и переносит ее в регистр команд.
-2. Меняет положение счетчика команд, который после этого указывает на сле-
дующую команду.
-3. Определяет тип вызванной команды.
-4. Если команда использует слово из памяти, определяет, где находится это слово.
-5. Переносит слово, если это необходимо, в регистр центрального процессора
-6. Выполняет команду.
-7. Переходит к шагу 1, чтобы начать выполнение следующей команды.
Такая последовательность шагов (выборка — декодирование — исполнение) является основой работы всех компьютеров.
Компьютер RISC (Reduced Instruction Set Computer — компьютер с сокращенным набором команд) противопоставлялся системе CISC (Complex Instruction Set Computer
— компьютер с полным набором команд). С этого момента началась грандиозная идеологическая война между сторонниками RISC и «консерваторами» (VAX, Intel,
мэйнфреймы IBM). По мнению первых, наилучший способ разработки компьютеров — включение туда небольшого количества простых команд, каждая из которых
выполняется за один цикл тракта данных, то есть производит над парой регистров какую-либо арифметическую или логическую операцию (например, сложение
или операцию логического И) и помещает результат обратно в регистр. Компания Intel сумела воплотить те же идеи в архитектуре CISC. Процессоры Intel,
начиная с процессора 486, содержат RISC-ядро, которое выполняет самые простые (и обычно самые распространенные) команды за один цикл тракта данных,
а по обычной технологии CISC интерпретируются более сложные команды. В результате обычные команды выполняются быстро, а более сложные и редкие — медленно.
Хотя при таком «гибридном» подходе производительность ниже, чем в архитектуре RISC, новая архитектура CISC имеет ряд преимуществ, поскольку позволяет
использовать старое программное обеспечение без изменений.
Существует ряд принципов разработки, иногда называемых принципами RISC, которым по возможности стараются следовать производители универсальных процессоров.
Из-за некоторых внешних ограничений, например требования совместимости с другими машинами, приходится время от времени идти на компромисс,но эти принципы —
цель, к которой стремится большинство разработчиков.
-Все команды должны выполняться непосредственно аппаратным обеспечением.
-Компьютер должен запускать как можно больше команд в секунду.
-Команды должны легко декодироваться.
-К памяти должны обращаться только команды загрузки и сохранения.
-Регистров должно быть много.
Существует две основные формы параллелизма: параллелизм на уровне команд и параллелизм на уровне процессоров. В первом случае параллелизм реализуется за счет
запуска большого количества команд каждую секунду. Во втором случае над одним заданием работают одновременно несколько процессоров. Каждый подход имеет свои преимущества.
Вызываются команды из памяти заранее и хранить в специальном наборе регистров. Набор регистров был назван буфером выборки с упреждением. Таким образом, когда
требовалась определенная команда, она вызывалась прямо из буфера, а обращения к памяти не происходило.В действительности при выборке с упреждением команда обрабатывается
за два шага: сначала происходит выборка команды, а затем ее выполнение. Дальнейшим развитием этой стратегии стала концепция конвейера.
Конвейер из 5 блоков, которые называются ступенями. Первая ступень (блок С1) вызывает команду из памяти и помещает ее в буфер, где она хранится до тех пор, пока
не потребуется. Вторая ступень (блок С2) декодирует эту команду, определяя ее тип и тип ее операндов. Третья ступень (блок С3) определяет местонахождение операндов
и вызывает их из регистров или из памяти. Четвертая ступень (блок С4) выполняет команду, обычно проводя операнды через тракт данных (см. рис. 2.2). И наконец, блок С5 записывает
результат обратно в нужный регистр. Конвейеры позволяют добиться компромисса между временем запаздывания (время выполнения одной команды) и пропускной способностью
процессора (количество команд, выполняемых процессором в секунду). Если время обращения составляет T нс, а конвейер имеет n ступеней, время запаздывания составит nT н.
Суперскалярные архитектуры
Один конвейер — хорошо, а два — еще лучше. Одна из возможных схем процессора с двумя конвейерами. Здесь общий блок выборки команд вызывает из памяти сразу по две команды
и помещает каждую из них в один из конвейеров. Каждый конвейер содержит АЛУ для параллельных операций. Чтобы выполняться параллельно, две команды не должны конфликтовать
из-за ресурсов (например, регистров) и ни одна из них не должна зависеть от результата выполнения другой.
Проверка совместимости команд для параллельного выполнения осуществляется по жестким правилам. Если команды, входящие в пару, были сложными или несовместимыми, выполнялась
только одна из них (в u-конвейере). Оставшаяся вторая команда сопоставлялась со следующей командой. Команды всегда выполнялись по порядку.
Теперь суперскалярными называют процессоры, способные запускать несколько команд (зачастую от четырех до шести) за один тактовый цикл. Естественно, для передачи всех этих
команд в суперскалярном процессоре должно быть несколько функциональных блоков. Элементы процессора, распараллеленного по данным, связаны между собой, поскольку их работу
контролирует единый блок управления. Система из нескольких параллельных процессоров, имеющих общую память, называется мультипроцессором. Поскольку каждый процессор может
записывать информацию в любую часть памяти и считывать информацию из любой части памяти, чтобы не допустить каких-либо нестыковок, их работа должна согласовываться программным
обеспечением. Возможны разные способы воплощения этой идеи. Самый простой из них - соединение единственной шиной нескольких процессоров и общей памяти. Естественно, при
наличии большого числа быстродействующих процессоров, которые постоянно пытаются получить доступ к памяти через одну и ту же шину, будут возникать конфликты. Чтобы разрешить
эту проблему и повысить производительность компьютера, разработаны различные схемы.
Мультипроцессоры имеют преимущество перед другими видами параллельных компьютеров, поскольку с единой общей памятью очень легко работать. Сложность заключается в том, чтобы
связать все процессоры с общей памятью. Поэтому многие разработчики просто отказались от идеи разделения памяти и стали создавать системы без общей памяти, состоящие из
большого числа взаимосвязанных компьютеров, у каждого из которых имеется собственная память. Такие системы называются мультикомпьютерами. В них процессоры являются слабо
связанными, в противоположность сильно связанным процессорам в мультипроцессорных системах.
Память — это тот компонент компьютера, в котором хранятся программы и данные. Также часто встречается термин «запоминающее устройство». Основной единицей хранения данных в
памяти является двоичный разряд, который называется битом. Бит может содержать 0 или 1. Считается, что некоторые компьютеры, например мэйнфреймы IBM, используют и десятичную,
и двоичную арифметику. На самом деле здесь применяется так называемый двоично-десятичный код. Для хранения одного десятичного разряда задействуются 4 бита. Эти 4 бита дают
16 комбинаций для размещения 10 различных значений (от 0 до 9).
Память состоит из ячеек, каждая из которых может хранить некоторую порцию информации. Каждая ячейка имеет номер, который называется адресом. По адресу программы могут ссылаться
на определенную ячейку. Если память содержит n ячеек, они будут иметь адреса от 0 до n — 1. Все ячейки памяти содержат одинаковое число битов. Если ячейка состоит из k бит,
она может содержать любую из 2k комбинаций.
В компьютерах, в которых используется двоичная система счисления (включая восьмеричное и шестнадцатеричное представление двоичных чисел), адреса памяти также выражаются в
двоичных числах. Если адрес состоит из m бит, максимальное число адресуемых ячеек составит 2m. Ячейка — минимальная адресуемая единица памяти. В последние годы практически
все производители выпускают компьютеры с 8-разрядными ячейками, которые называются байтами (также иногда встречается термин «октет»). Байты группируются в слова.
Байты в слове могут нумероваться слева направо или справа налево.
В памяти компьютера из-за всплесков напряжения и по другим причинам время от времени могут возникать ошибки. Для борьбы с ними используются специальные коды, умеющие
обнаруживать и исправлять ошибки. В этом случае к каждому слову в памяти особым образом добавляются дополнительные биты. Когда слово считывается из памяти, эти дополнительные
биты проверяются, что и позволяет обнаруживать ошибки. Для любых двух кодовых слов, например 10001001 и 10110001, можно определить, сколько соответствующих битов в них отличаются.
Число битовых позиций, по которым отличаются два слова, называется интервалом Хэмминга [Hamming, 1950]. Если интервал Хэмминга для двух слов равен d, значит, достаточно
d одноразрядных ошибок, чтобы превратить одно слово в другое. Например, интервал Хэмминга для кодовых слов 11110001 и 00110000 равен 3, поскольку для превращения первого слова
во второе достаточно трех одноразрядных ошибок.
Процессоры всегда работали быстрее, чем память. Поскольку процессоры и память совершенствуются параллельно, это несоответствие сохраняется. Поскольку на микросхему можно помещать
все больше и больше транзисторов, разработчики процессоров создают конвейерные и суперскалярные архитектуры, что еще больше увеличивает быстродействие процессоров. Разработчики
памяти обычно используют новые технологии для увеличения емкости, а не быстродействия, что делает разрыв еще большим. На практике такое несоответствие в скорости работы приводит
к тому, что когда процессор обращается к памяти, проходит несколько машинных циклов, прежде чем он получит запрошенное слово. Чем медленнее работает память, тем дольше процессору
приходится ждать, тем больше циклов проходит.Самый простой из них — начать считывать информацию из памяти и при этом продолжать выполнение команд, но если какая-либо команда
попытается использовать слово до того, как оно считано из памяти, процессор должен приостановить работу. Другое решение проблемы — сконструировать машину, которая не приостанавливает
работу, но следит, чтобы программы-компиляторы не использовали слова до того, как они считаны из памяти. Однако это не так просто осуществить на практике. Часто при обработке команды
загрузки машина не может выполнять другие действия, поэтому компилятор вынужден вставлять пустые команды, которые не производят никаких операций, но при этом занимают место в памяти.
На самом деле эта проблема не технологическая, а экономическая. Инженеры знают, как создать память, которая работает так же быстро, как процессор. Однако ее приходится помещать
прямо на микросхему процессора (поскольку информация через шину поступает очень медленно). Размещение памяти большого объема на микросхеме процессора увеличивает его размеры,
а следовательно, и стоимость. Существуют технологии, объединяющие небольшую и быструю память с большой и медленной, что позволяет по разумной цене получить память и с высокой
скоростью работы, и большой емкости. Память небольшого объема с высокой скоростью работы называется кэш-памятью.Основная идея кэш-памяти проста: в ней находятся слова, которые чаще
всего используются.
Если процессору нужно какое-нибудь слово, сначала он обращается к кэш-памяти. Только в том случае, если слова там нет, он обращается к основной памяти. Таким образом, успех или
неудача зависит от того, какая часть слов находится в кэш-памяти. Ситуация, когда при последовательных обращениях к памяти в течение некоторого промежутка времени используется только
небольшая ее область, называется принципом локальности. Этот принцип составляет основу всех систем кэш-памяти. Идея состоит в том, что когда определенное слово вызывается из
памяти, оно вместе с соседними словами переносится в кэш-память, что позволяет при очередном запросе быстро обращаться к следующим словам. Основная память и кэш-память делятся на
блоки фиксированного размера с учетом принципа локальности. Блоки внутри кэш-памяти обычно называют строками кэша (cache lines). При кэш-промахе из основной памяти в кэш-память
загружается вся строка, а не только необходимое слово.
Проще всего разработать объединенную кэш-память, в которой будут храниться и данные, и команды. В этом случае вызов команд и данных автоматически уравновешивается. Однако в настоящее
время существует тенденция к использованию разделенной кэш-памяти, когда команды хранятся в одной кэш-памяти, а данные — в другой. Такая архитектура также называется гарвардской.
Современные разработчики пошли по этому пути, поскольку сейчас широко распространены конвейерные архитектуры, а при конвейерной организации обращения и к командам, и к данным (операндам)
должны осуществляться одновременно. Разделенная кэш-память позволяет осуществлять параллельный доступ, а общая — нет.
